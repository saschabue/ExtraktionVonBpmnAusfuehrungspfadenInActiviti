package org.extraktion.templatesCreation.behaviour;

import java.util.List;

import javax.persistence.Entity;
import javax.persistence.Table;

import org.activiti.engine.delegate.DelegateExecution;
import org.activiti.engine.delegate.DelegateTask;
import org.activiti.engine.repository.ProcessDefinition;
import org.extraktion.templatesCreation.SuperElementObject;
import org.extraktion.templatesCreation.behaviour.helper.VariablesObject;
import org.stringtemplate.v4.ST;

/**
 * Temple erstellendes UserTask Objekt.
 * 
 * @author Sascha Buelles
 *
 */
@Entity
@Table(name = "EXTRAKTION")
public class UserTaskElementObject extends SuperElementObject {

	@Override
	protected void createTemplate(final DelegateExecution execution) {
		// UserTask bekommt keine DelegateExecution sondern einen DelegateTask
	}

	/**
	 * @param execution
	 *            Deligiertes Objekt.
	 */
	public UserTaskElementObject(final DelegateTask execution) {
		super(execution);
	}

	@Override
	public final void createTemplateForUserTask(final DelegateTask execution) {
		ProcessDefinition singleResult = execution.getExecution()
				.getEngineServices().getRepositoryService()
				.createNativeProcessDefinitionQuery()
				.sql("Select * FROM ACT_RE_PROCDEF WHERE ID_ ='" 
						+ execution.getProcessDefinitionId() + "'")
				.singleResult();

		String executionUser = execution.getAssignee();
		List<VariablesObject> listOfProzessVariables = mapToObject(execution.getVariables());
		String processKey = singleResult.getKey();

		ST templateLocal = templateImpl();
		templateLocal.add("taskDefinitionKey", execution.getTaskDefinitionKey());
		templateLocal.add("executionUser", executionUser);
		templateLocal.add("processVariables", listOfProzessVariables);
		templateLocal.add("processKey", processKey);
		setTemplate(templateLocal);
	}

	@Override
	protected final void addImportsForElemente() {
		setImportTemplate(new ST("import org.activiti.engine.task.Task;\n"));
	}

	@Override
	protected final ST templateImpl() {
		return new ST("\n//___User Task___\n"
				+ "processInstance = runtimeService.createProcessInstanceQuery()."
				+ "processDefinitionKey(\"<processKey>\").singleResult();\n"
				+ "Task task_<taskDefinitionKey> = (taskService.createTaskQuery().processInstanceId(processInstance.getId())).active().taskDefinitionKey(\"<taskDefinitionKey>\").singleResult();\n"
				+ "taskService.setAssignee(task_<taskDefinitionKey>.getId(),\"<executionUser>\");\n"
				+ "<processVariables:{ pv | variableMap.put(\"<pv.variableName>\", <if(pv.isString)>\"<endif> <pv.variableContent><if(pv.isString)>\"<endif>);\n}>"
				+ "taskService.complete(task_<taskDefinitionKey>.getId(), variableMap);\n" 
				+ "//___User Task___\n");
	}

}
