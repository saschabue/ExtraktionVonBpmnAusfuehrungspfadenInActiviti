package org.extraktion.listener;

import org.activiti.engine.delegate.DelegateExecution;
import org.extraktion.TestObjectDesigner;
import org.extraktion.templatesCreation.SuperElementObject;
import org.extraktion.templatesCreation.behaviour.TimerCatchEventObject;
import org.hibernate.Session;

/**
 * Derzeit nicht genutzt. Vorlage für Intermediate Events siehe SignalReceive.
 * Boundary Timer siehe SequenceFlowElement/SequenceFlowRegisteredBoundary.
 * @author Sascha Buelles
 *
 */
public class ExecutionListenerImplTimerCatchEvent extends StandardExecutionListenerImplementation {

	private static final long serialVersionUID = 1L;

	@Override
	protected final SuperElementObject createExecutionObjectWithType(final DelegateExecution execution) {
		SuperElementObject timerCatchEventObject = new TimerCatchEventObject(execution);
		timerCatchEventObject.setelementName("TimerBoundaryEvent");
		timerCatchEventObject.setElementDefinitionKey(execution.getCurrentActivityId());

		Session session = TestObjectDesigner.getInstance().getHibernateSessionFactory().openSession();
		session.beginTransaction();
		timerCatchEventObject.setId(session.createNativeQuery("SELECT * FROM EXTRAKTION;").getResultList().size() + 1);
		session.save(timerCatchEventObject);
		session.getTransaction().commit();
		session.close();
		return timerCatchEventObject;
	}

}
